addi $2, $0, 5 -> input número inteiro
syscall

addi $2, $0, 12 -> input caractere
syscall

add $4, $0, $fonte
addi $2, $0, 1 -> printar número inteiro
syscall 

addi $4, $0, ''
addi $2, $0, 11 -> printar caractere
syscall 

addi $2, $0, 10 -> encerrar o programa
syscall

SRA -> Mantém o bit de sinal, importante para dividir números negativos
SRL / SLL -> Desloca adicionando 0 na direita(divide por 2) / Desloca adicionando 0 na esquerda(multiplica por 2)

Tanto o SRA quanto o SRL pode ser usado para dividir números positivos

// CONDICIONAL

beq -> Se o conteúdo de dois registradores forem iguais, vai para um rótulo:

beq $8, $9, rotulo

bne -> Se o conteúdo de dois registradores forem diferentes, vai para um rótulo:

bne $8, $9, rotulo

j rotulo -> Essa instrução desvia de qualquer forma o fluxo para um rotulo, importante para o else

slt -> Essa instrução compara se o valor de um registrador é menor que o do outro, se for ele guarda 1(true) no registrador destino ou 0(false):

slt $10, $8, $9 -> Guarda 1 em $10 se $8 for menor que $9 ou 0 se não for

// LAÇO(for)

primeiro cria-se um rotulo para o laço

depois adiociona-se em um registrador o range

depois adiciona-se em outro o valor da variável de inicialização(i)

faz um beq de comparação para ver se são iguais(se forem, vai para um rotulo de fim de laço)

senão, vai para um bloco de código

após o bloco de código, incrementa / decrementa na variável inicializada

por fim, utiliza-se o j para retornar para o rotulo do laço


// VETORES

lw -> carrega o dado que tiver no endereço de memoria para um registrador destino

lw $destino, imm($x) -> imm + $x = endereço de memeoria do dado

sw -> grava o dado de um registrador fonte em um endereço de memoria

sw $fonte, imm($x) -> imm + $x = endereço que vai receber

lui -> guarda na parte alta de um regsitrador (bits 16 a 31) um valor hexadecimal

lui $destino, 0x1001 -> primeiro endereço de memoria

addi $destino, $destino, 4 -> próximo endereço e por ai vai
